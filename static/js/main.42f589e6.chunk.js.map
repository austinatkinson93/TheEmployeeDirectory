{"version":3,"sources":["components/Header/index.js","utils/EmployeeApi.js","components/EmployeeList/index.js","components/DirectoryContainer/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","class","axios","get","EmployeeList","props","filteredArr","employees","filter","employee","name","first","toUpperCase","includes","search","className","scope","onClick","map","element","i","key","alt","src","picture","medium","last","phone","email","dob","date","slice","DirectoryContainer","state","sorted","searchEmployees","EmployeeApi","then","res","setState","data","results","catch","err","console","log","handleInputChange","event","target","value","handleClick","employeesCopy","sortThing","sort","a","b","nameA","nameB","this","onChange","placeholder","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.42f589e6.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./style.css\";\r\n\r\nfunction Header() {\r\n  return (\r\n    <div >\r\n      <div class=\"jumbotron jumbotron-fluid header\">\r\n        <div class=\"container\">\r\n          <h1 class=\"display-4\">Employee Directory</h1>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import axios from \"axios\"\r\n\r\nconst URL = \"https://randomuser.me/api/?results=200&nat=us\"\r\n\r\n\r\nexport default {\r\n    search: function() {\r\n      return axios.get(URL)\r\n    }\r\n  };\r\n\r\n  // https://randomuser.me/api/?results=200&nat=us *will use this API after tutoring","import React from \"react\";\n\n\nfunction EmployeeList(props) {\n    let filteredArr = props.employees.filter(employee => employee.name.first.toUpperCase().includes(props.search.toUpperCase()))\n    return <div>\n        <div>\n            <table className=\"table\">\n                <thead>\n                    <tr>\n                        <th>image</th>\n                        <th scope=\"col\"><a name=\"name\" onClick={props.onClick}>Name</a></th>\n                        <th scope=\"col\"><a name=\"phone\" onClick={props.onClick}>Phone</a></th>\n                        <th scope=\"col\"><a name=\"email\" onClick={props.onClick}>Email</a></th>\n                        <th scope=\"col\" ><a name=\"dob\" onClick={props.onClick}>DOB</a></th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {filteredArr.map((element, i) => {\n                        return <tr key={i}>\n                            <td><img alt= {element.name.first} src={element.picture.medium}></img></td>\n                            <td>{element.name.first} {element.name.last}</td>\n                            <td>{element.phone}</td>\n                            <td>{element.email}</td>\n                            <td>{element.dob.date.slice(0,10)}</td>\n                        </tr>\n                    })}\n                </tbody>\n            </table>\n        </div>\n    </div>\n}\n\nexport default EmployeeList ","import React from \"react\";\nimport { Component } from \"react\";\nimport EmployeeApi from \"../../utils/EmployeeApi\"\nimport EmployeeList from \"../EmployeeList\";\nimport \"./style.css\"\n\nclass DirectoryContainer extends Component {\n    state = {\n        employees: [],\n        search: \"\",\n        sorted: false\n    }\n\n    componentDidMount() {\n        this.searchEmployees()\n        console.log(\"employees after api call:\")\n        console.log(this.state.employees)\n    }\n\n    searchEmployees = () => {\n        EmployeeApi.search()\n            .then(res => {\n                this.setState({ employees: res.data.results })\n\n            })\n            .catch(err => console.log(err));\n    };\n\n    handleInputChange = (event) => {\n        const search = event.target.value;\n\n        this.setState({ search });\n    };\n\n    handleClick = (event) => {\n        let employeesCopy = [...this.state.employees];\n        let sortThing = event.target.name;\n        if (this.state.sorted === false) {\n            employeesCopy.sort((a, b) => {\n                let nameA;\n                let nameB;\n                if (sortThing !== \"name\") {\n                    nameA = +a[sortThing];\n                    nameB = +b[sortThing];\n                } else {\n                    nameA = a[sortThing].first.toUpperCase(); // ignore upper and lowercase\n                    nameB = b[sortThing].first.toUpperCase(); // ignore upper and lowercase\n                }\n                if (nameA < nameB) {\n                    return -1;\n                }\n                if (nameA > nameB) {\n                    return 1;\n                }\n\n                // names must be equal\n                return 0;\n            })\n\n            this.setState({ employees: employeesCopy, sorted: true });\n        } else {\n            employeesCopy.sort((a, b) => {\n                let nameA;\n                let nameB;\n                if (sortThing !== \"name\") {\n                    nameA = +a[sortThing];\n                    nameB = +b[sortThing];\n                } else {\n                    nameA = a[sortThing].first.toUpperCase(); // ignore upper and lowercase\n                    nameB = b[sortThing].first.toUpperCase(); // ignore upper and lowercase\n                }\n                if (nameA < nameB) {\n                    return 1;\n                }\n                if (nameA > nameB) {\n                    return -1;\n                }\n\n                // names must be equal\n                return 0;\n            })\n\n            this.setState({ employees: employeesCopy, sorted: false });\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"container\">\n                <div className=\"row\">\n                    <form>\n                        <div className=\"form-group\">\n                            <input className=\"form-control\"\n                                value={this.state.search}\n                                onChange={this.handleInputChange}\n                                placeholder=\"Search\"\n                            />\n                        </div>\n                    </form>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <EmployeeList\n                            employees={this.state.employees}\n                            search={this.state.search}\n                            onClick={this.handleClick}\n                        />\n                    </div>\n\n                </div>\n            </div>\n\n        );\n    }\n\n}\n\nexport default DirectoryContainer","import React from 'react';\nimport Header from \"./components/Header\"\nimport DirectoryContainer from \"./components/DirectoryContainer\"\n\nfunction App() {\n  return (\n    <div>\n      <Header/>\n      <DirectoryContainer />\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}